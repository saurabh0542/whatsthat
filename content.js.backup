// WhatsApp Reaction Analyzer - Content Script
console.log('WhatsApp Reaction Analyzer: Content script loaded!');
console.log('WhatsApp Reaction Analyzer: Current URL:', document.URL);
console.log('WhatsApp Reaction Analyzer: Document ready state:', document.readyState);

// Immediate DOM check
setTimeout(() => {
  console.log('=== IMMEDIATE DOM CHECK ===');
  console.log('Body classes:', document.body?.className);
  console.log('Main element found:', !!document.querySelector('#main'));
  console.log('Messages found:', document.querySelectorAll('[data-pre-plain-text]').length);
  console.log('All divs:', document.querySelectorAll('div').length);
  console.log('Document URL:', document.URL);

  // Test if we can find the right pane with different selectors
  const selectors = ['#main', '#whatsapp-web', '[data-testid="conversation-panel-messages"]', 'div[role="application"]'];
  selectors.forEach(selector => {
    const element = document.querySelector(selector);
    console.log(`Selector "${selector}": ${element ? 'FOUND' : 'NOT FOUND'}`);
    if (element) {
      console.log(`  - Classes: ${element.className}`);
      console.log(`  - Children: ${element.children.length}`);
    }
  });
}, 100);

// Add global function for manual testing - available immediately
window.debugWhatsAppMessages = function() {
  console.log('=== MANUAL DEBUG ===');
  console.log('Messages with data-pre-plain-text:', document.querySelectorAll('[data-pre-plain-text]').length);
  console.log('All divs:', document.querySelectorAll('div').length);
  console.log('Elements with data-id:', document.querySelectorAll('[data-id]').length);
  console.log('Document URL:', document.URL);
  console.log('Document title:', document.title);
  
  const messages = document.querySelectorAll('[data-pre-plain-text]');
  if (messages.length > 0) {
    console.log('First message:', messages[0]);
    console.log('First message HTML:', messages[0].outerHTML);
  }
  
  // Check for common WhatsApp elements
  const possibleElements = [
    'div[role="application"]',
    'div[role="main"]', 
    'div[data-testid]',
    'div[id*="whatsapp"]',
    'div[class*="whatsapp"]'
  ];
  
  possibleElements.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    if (elements.length > 0) {
      console.log(`Found ${elements.length} elements with selector: ${selector}`);
    }
  });
};

// Add global function for DOM capture - available immediately
window.captureWhatsAppDOM = function() {
  console.log('=== WHATSAPP DOM CAPTURE TOOL ===');
  
  // Capture the entire page structure
  const pageInfo = {
    url: document.URL,
    title: document.title,
    bodyClasses: document.body.className,
    timestamp: new Date().toISOString()
  };
  
  console.log('Page Info:', pageInfo);
  
  // Find all major containers
  const containers = [
    { name: 'Main App', selector: '#whatsapp-web' },
    { name: 'Left Pane', selector: '#side' },
    { name: 'Right Pane', selector: '#main' },
    { name: 'Chat List', selector: '[data-testid="chat-list"]' },
    { name: 'Conversation Panel', selector: '[data-testid="conversation-panel"]' }
  ];
  
  containers.forEach(container => {
    const element = document.querySelector(container.selector);
    if (element) {
      console.log(`✅ ${container.name}:`, {
        selector: container.selector,
        element: element,
        classes: element.className,
        children: element.children.length,
        innerHTML: element.innerHTML.substring(0, 500) + '...'
      });
    } else {
      console.log(`❌ ${container.name}: Not found`);
    }
  });
  
  // Find all elements with data-testid
  const testIdElements = document.querySelectorAll('[data-testid]');
  console.log(`Found ${testIdElements.length} elements with data-testid:`);
  
  const testIdMap = {};
  testIdElements.forEach(el => {
    const testId = el.getAttribute('data-testid');
    if (!testIdMap[testId]) {
      testIdMap[testId] = [];
    }
    testIdMap[testId].push({
      element: el,
      classes: el.className,
      text: el.textContent.substring(0, 100)
    });
  });
  
  Object.keys(testIdMap).forEach(testId => {
    console.log(`  ${testId}: ${testIdMap[testId].length} elements`);
  });
  
  // Find all messages
  const messages = document.querySelectorAll('[data-pre-plain-text]');
  console.log(`Found ${messages.length} messages:`);
  
  messages.slice(0, 3).forEach((msg, index) => {
    console.log(`  Message ${index + 1}:`, {
      element: msg,
      prePlainText: msg.getAttribute('data-pre-plain-text'),
      classes: msg.className,
      parent: msg.parentElement?.tagName,
      parentClasses: msg.parentElement?.className
    });
  });
  
  // Find all elements with titles
  const titleElements = document.querySelectorAll('[title]');
  console.log(`Found ${titleElements.length} elements with title attribute:`);
  
  titleElements.slice(0, 10).forEach((el, index) => {
    console.log(`  ${index + 1}: "${el.getAttribute('title')}" - ${el.tagName}.${el.className}`);
  });
  
  // Generate a visual map
  console.log('=== VISUAL DOM MAP ===');
  const visualMap = document.documentElement.outerHTML.substring(0, 2000);
  console.log('First 2000 characters of HTML:', visualMap);
  
  return {
    pageInfo,
    containers: containers.map(c => ({
      name: c.name,
      selector: c.selector,
      found: !!document.querySelector(c.selector)
    })),
    testIdCount: testIdElements.length,
    messageCount: messages.length,
    titleCount: titleElements.length
  };
};

// Add function to capture specific chat structure
window.captureChatStructure = function() {
  console.log('=== CHAT STRUCTURE CAPTURE ===');
  
  // Look for chat-related elements
  const chatElements = document.querySelectorAll('div[title], div[data-testid*="chat"], div[data-testid*="conversation"]');
  
  console.log(`Found ${chatElements.length} potential chat elements:`);
  
  chatElements.forEach((el, index) => {
    console.log(`Chat Element ${index + 1}:`, {
      element: el,
      title: el.getAttribute('title'),
      testId: el.getAttribute('data-testid'),
      classes: el.className,
      text: el.textContent.substring(0, 200),
      parent: el.parentElement?.tagName,
      parentClasses: el.parentElement?.className,
      children: el.children.length
    });
  });
  
  return chatElements.length;
};

// Add function to capture message structure
window.captureMessageStructure = function() {
  console.log('=== MESSAGE STRUCTURE CAPTURE ===');
  
  const messages = document.querySelectorAll('[data-pre-plain-text]');
  console.log(`Found ${messages.length} messages`);
  
  if (messages.length > 0) {
    const sampleMessage = messages[0];
    console.log('Sample Message Structure:', {
      element: sampleMessage,
      prePlainText: sampleMessage.getAttribute('data-pre-plain-text'),
      classes: sampleMessage.className,
      parent: sampleMessage.parentElement,
      parentClasses: sampleMessage.parentElement?.className,
      siblings: sampleMessage.parentElement?.children.length,
      fullHTML: sampleMessage.outerHTML
    });
  }
  
  return messages.length;
};

class WhatsAppReactionTracker {
  constructor() {
    this.reactionData = new Map(); // Map of messageId -> {sender, reactions: Map<reactor, count>}
    this.messageObserver = null;
    this.isTracking = false;
    this.scanAttempts = 0;
    this.maxScanAttempts = 5;
    this.init();
  }

  init() {
    console.log('WhatsApp Reaction Analyzer: Initializing...');
    this.scanExistingMessages();
    this.startTracking();
    this.setupMessageListener();
  }

  scanExistingMessages() {
    this.scanAttempts++;
    console.log(`WhatsApp Reaction Analyzer: Scanning existing messages... (attempt ${this.scanAttempts}/${this.maxScanAttempts})`);
    
    // Wait longer for WhatsApp to fully load
    setTimeout(() => {
      // Check if WhatsApp is actually ready by looking for conversation elements
      const conversationReady = document.querySelector('#main') ||
                               document.querySelector('[data-testid="conversation-panel-messages"]') ||
                               document.querySelector('[data-testid="conversation-panel"]') ||
                               document.querySelector('div[role="application"]');
      
      if (!conversationReady) {
        console.log('WhatsApp Reaction Analyzer: WhatsApp not fully loaded yet, retrying...');
        if (this.scanAttempts < this.maxScanAttempts) {
          setTimeout(() => this.scanExistingMessages(), 2000);
        }
        return;
      }
      
      console.log('WhatsApp Reaction Analyzer: WhatsApp appears to be ready, proceeding...');
      
      // First, try to find the active conversation panel (the specific chat/group)
      const activeChatSelectors = [
        '#main',  // This is the correct right pane selector
        '[data-testid="conversation-panel-messages"]',
        'div[data-testid="conversation-panel-messages"]',
        'div[role="application"]',
        'div[data-testid="conversation-panel"]',
        'div[data-testid="conversation"]'
      ];
      
      let chatContainer = null;
      for (const selector of activeChatSelectors) {
        chatContainer = document.querySelector(selector);
        if (chatContainer) {
          console.log(`WhatsApp Reaction Analyzer: Found active chat container with selector: ${selector}`);
          break;
        }
      }
      
      // If no active chat container found, try broader selectors
      if (!chatContainer) {
        const possibleContainers = [
          '#main',  // This is the correct right pane selector
          '#whatsapp-web',
          '[data-testid="chatlist"]',
          '.chat-container',
          '[data-testid="main"]',
          'div[role="main"]'
        ];
        
        for (const selector of possibleContainers) {
          chatContainer = document.querySelector(selector);
          if (chatContainer) {
            console.log(`WhatsApp Reaction Analyzer: Found general container with selector: ${selector}`);
            break;
          }
        }
      }
      
      if (chatContainer) {
        // Try multiple possible selectors for messages
        const possibleMessageSelectors = [
          'div[data-pre-plain-text]',  // This is the key selector based on your example!
          '[data-testid="msg-container"]',
          'div[data-id]',
          '[data-id]',
          '.message',
          '[data-testid="message"]',
          'div[role="row"]',
          '.msg',
          'div[data-testid*="msg"]',
          'div[class*="message"]',
          'div[class*="msg"]',
          'div[data-testid="conversation-panel-messages"] > div',
          'div[data-testid="conversation-panel-messages"] div[data-id]',
          'div.copyable-text'  // Based on your example with class "_ahy1 copyable-text"
        ];
        
        let messageElements = [];
        for (const selector of possibleMessageSelectors) {
          const elements = chatContainer.querySelectorAll(selector);
          if (elements.length > 0) {
            console.log(`WhatsApp Reaction Analyzer: Found ${elements.length} messages with selector: ${selector}`);
            messageElements = elements;
            break;
          }
        }
        
        if (messageElements.length === 0) {
          console.log('WhatsApp Reaction Analyzer: No messages found with any selector. Let me inspect the DOM...');
          this.inspectDOM(chatContainer);
          
          // Try a more aggressive approach - look for ANY divs that might be messages
          console.log('WhatsApp Reaction Analyzer: Trying aggressive message detection...');
          const allDivs = chatContainer.querySelectorAll('div');
          console.log(`Total divs found: ${allDivs.length}`);
          
          // Look for divs with data-pre-plain-text ONLY in the active chat container
          const messagesInActiveChat = chatContainer.querySelectorAll('[data-pre-plain-text]');
          console.log(`Messages with data-pre-plain-text found in active chat: ${messagesInActiveChat.length}`);
          
          if (messagesInActiveChat.length > 0) {
            console.log('WhatsApp Reaction Analyzer: Found messages in active chat!');
            messagesInActiveChat.forEach((messageEl, index) => {
              setTimeout(() => {
                console.log(`WhatsApp Reaction Analyzer: About to analyze fallback message ${index + 1}/${messagesInActiveChat.length}:`, messageEl);
                this.analyzeMessage(messageEl);
              }, index * 10);
            });
          }
        } else {
          console.log(`WhatsApp Reaction Analyzer: Processing ${messageElements.length} messages`);
          
          messageElements.forEach((messageEl, index) => {
            // Add a small delay to avoid overwhelming the browser
            setTimeout(() => {
              console.log(`WhatsApp Reaction Analyzer: About to analyze message ${index + 1}/${messageElements.length}:`, messageEl);
              this.analyzeMessage(messageEl);
            }, index * 5); // Reduced delay from 10ms to 5ms
          });
        }
        
        // Also scan for any messages that might be loaded dynamically
        if (this.scanAttempts < this.maxScanAttempts) {
          setTimeout(() => {
            this.scanExistingMessages();
          }, 3000);
        }
        
      } else {
        console.log('WhatsApp Reaction Analyzer: Chat container not found. Let me inspect the entire page...');
        this.inspectDOM(document.body);
        
        // Try to find messages anywhere on the page
        console.log('WhatsApp Reaction Analyzer: Searching entire page for messages...');
        const allMessagesWithPrePlainText = document.querySelectorAll('[data-pre-plain-text]');
        console.log(`Messages with data-pre-plain-text found anywhere: ${allMessagesWithPrePlainText.length}`);
        
        if (allMessagesWithPrePlainText.length > 0) {
          console.log('WhatsApp Reaction Analyzer: Found messages! Processing them...');
          allMessagesWithPrePlainText.forEach((messageEl, index) => {
            setTimeout(() => {
              this.analyzeMessage(messageEl);
            }, index * 10);
          });
        } else {
          console.log('WhatsApp Reaction Analyzer: No messages found anywhere. WhatsApp might not be fully loaded.');
        }
        
        // Only retry if we haven't exceeded max attempts
        if (this.scanAttempts < this.maxScanAttempts) {
          setTimeout(() => this.scanExistingMessages(), 2000);
        } else {
          console.log('WhatsApp Reaction Analyzer: Max scan attempts reached. Stopping automatic scanning.');
        }
      }
    }, 1000);
  }

  inspectDOM(container) {
    console.log('WhatsApp Reaction Analyzer: DOM Inspection Results:');
    console.log('Container element:', container);
    console.log('Container classes:', container.className);
    console.log('Container data attributes:', Array.from(container.attributes).filter(attr => attr.name.startsWith('data-')));
    
    // Look for any divs that might be messages
    const allDivs = container.querySelectorAll('div');
    console.log(`Total divs in container: ${allDivs.length}`);
    
    // Look for elements with common message-like attributes
    const elementsWithDataId = container.querySelectorAll('[data-id]');
    console.log(`Elements with data-id: ${elementsWithDataId.length}`);
    
    const elementsWithTestId = container.querySelectorAll('[data-testid]');
    console.log(`Elements with data-testid: ${elementsWithTestId.length}`);
    
    // Look for messages with data-pre-plain-text
    const messagesWithPrePlainText = container.querySelectorAll('[data-pre-plain-text]');
    console.log(`Messages with data-pre-plain-text: ${messagesWithPrePlainText.length}`);
    
    // Check what's actually on the page
    console.log('=== PAGE STRUCTURE ANALYSIS ===');
    console.log('Document title:', document.title);
    console.log('Document URL:', document.URL);
    console.log('Body classes:', document.body.className);
    
    // Look for common WhatsApp elements
    const possibleWhatsAppElements = [
      'div[role="application"]',
      'div[role="main"]',
      'div[data-testid]',
      'div[id*="whatsapp"]',
      'div[class*="whatsapp"]',
      'div[class*="chat"]',
      'div[class*="message"]'
    ];
    
    possibleWhatsAppElements.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      if (elements.length > 0) {
        console.log(`Found ${elements.length} elements with selector: ${selector}`);
      }
    });
    
    if (messagesWithPrePlainText.length > 0) {
      console.log('=== SAMPLE MESSAGE STRUCTURE ===');
      const sampleMessage = messagesWithPrePlainText[0];
      console.log('Sample message HTML:', sampleMessage.outerHTML);
      
      // Look for reactions in this message
      const allSpans = sampleMessage.querySelectorAll('span');
      const allDivs = sampleMessage.querySelectorAll('div');
      
      console.log(`Spans in message: ${allSpans.length}`);
      console.log(`Divs in message: ${allDivs.length}`);
      
      // Check for potential reaction elements
      allSpans.forEach((span, index) => {
        const text = span.textContent?.trim();
        const title = span.getAttribute('title');
        const ariaLabel = span.getAttribute('aria-label');
        
        if (text && (text.includes('👍') || text.includes('❤️') || text.includes('😂') || 
                    text.includes('😮') || text.includes('😢') || text.includes('😡') ||
                    title?.includes('reaction') || ariaLabel?.includes('reaction'))) {
          console.log(`Potential reaction span ${index}:`, {
            text: text,
            title: title,
            ariaLabel: ariaLabel,
            html: span.outerHTML
          });
        }
      });
      
      allDivs.forEach((div, index) => {
        const text = div.textContent?.trim();
        const title = div.getAttribute('title');
        const ariaLabel = div.getAttribute('aria-label');
        
        if (text && (text.includes('👍') || text.includes('❤️') || text.includes('😂') || 
                    text.includes('😮') || text.includes('😢') || text.includes('😡') ||
                    title?.includes('reaction') || ariaLabel?.includes('reaction'))) {
          console.log(`Potential reaction div ${index}:`, {
            text: text,
            title: title,
            ariaLabel: ariaLabel,
            html: div.outerHTML
          });
        }
      });
    }
    
    // Show first few elements for inspection
    console.log('First 5 divs:', Array.from(allDivs).slice(0, 5).map(div => ({
      tagName: div.tagName,
      className: div.className,
      dataAttributes: Array.from(div.attributes).filter(attr => attr.name.startsWith('data-')),
      textContent: div.textContent?.slice(0, 50) + '...'
    })));
  }

  startTracking() {
    if (this.isTracking) return;
    this.isTracking = true;
    
    // Observe new messages being added to the chat
    const chatContainer = document.querySelector('#main') || 
                         document.querySelector('[data-testid="conversation-panel-messages"]') || 
                         document.querySelector('div[role="application"]');
    
    if (chatContainer) {
      this.messageObserver = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              this.processNewMessage(node);
            }
          });
        });
      });

      this.messageObserver.observe(chatContainer, {
        childList: true,
        subtree: true
      });
      
      console.log('WhatsApp Reaction Analyzer: Started tracking messages');
      
      // Also observe for chat changes (when user switches to different chat/group)
      this.observeChatChanges();
    } else {
      console.log('WhatsApp Reaction Analyzer: Chat container not found, retrying...');
      setTimeout(() => this.startTracking(), 2000);
    }
  }

  observeChatChanges() {
    // Watch for changes in the conversation header to detect chat switches
    const conversationHeader = document.querySelector('#side') ||  // Watch left pane for chat changes
                             document.querySelector('[data-testid="conversation-header"]') ||
                             document.querySelector('[data-testid="conversation-title"]') ||
                             document.querySelector('header');
    
    if (conversationHeader) {
      const chatChangeObserver = new MutationObserver((mutations) => {
        console.log('WhatsApp Reaction Analyzer: Chat changed, clearing previous data');
        this.reactionData.clear();
        this.sendDataToBackground();
        
        // Rescan messages for the new chat
        setTimeout(() => {
          this.scanExistingMessages();
        }, 1000);
      });

      chatChangeObserver.observe(conversationHeader, {
        childList: true,
        subtree: true,
        characterData: true
      });
      
      console.log('WhatsApp Reaction Analyzer: Started observing chat changes');
    }
  }

  isMessageInActiveChat(messageEl) {
    // Find the active conversation panel
    const activeChatPanel = document.querySelector('#main') ||
                           document.querySelector('[data-testid="conversation-panel-messages"]') ||
                           document.querySelector('div[data-testid="conversation-panel"]') ||
                           document.querySelector('div[role="application"]');
    
    console.log('WhatsApp Reaction Analyzer: Checking if message is in active chat...');
    console.log('Active chat panel found:', activeChatPanel);
    
    if (!activeChatPanel) {
      console.log('WhatsApp Reaction Analyzer: No active chat panel found');
      return false;
    }
    
    // Check if the message element is within the active chat panel
    const isInActiveChat = activeChatPanel.contains(messageEl);
    
    console.log(`WhatsApp Reaction Analyzer: Message in active chat: ${isInActiveChat}`);
    
    return isInActiveChat;
  }

  processNewMessage(node) {
    // Look for message elements
    const messageElements = node.querySelectorAll('[data-testid="msg-container"]') || 
                           node.querySelectorAll('div[data-id]');
    
    messageElements.forEach(messageEl => {
      this.analyzeMessage(messageEl);
    });

    // Also check if the node itself is a message
    if (node.matches && (node.matches('[data-testid="msg-container"]') || node.matches('div[data-id]'))) {
      this.analyzeMessage(node);
    }
  }

  analyzeMessage(messageEl) {
    try {
      console.log('WhatsApp Reaction Analyzer: Starting to analyze message:', messageEl);

      // First check if this message is in the currently active chat
      if (!this.isMessageInActiveChat(messageEl)) {
        console.log('WhatsApp Reaction Analyzer: Message not in active chat, skipping');
        return; // Skip messages from other chats
      }

      console.log('WhatsApp Reaction Analyzer: Message is in active chat, proceeding...');

      // Debug: Show the data-pre-plain-text content
      const prePlainText = messageEl.getAttribute('data-pre-plain-text');
      console.log('WhatsApp Reaction Analyzer: data-pre-plain-text:', prePlainText);
      
      // Extract message ID - look for the data-id in parent elements
      let messageId = messageEl.getAttribute('data-id');
      
      // If not found on this element, look in parent elements
      if (!messageId) {
        let parent = messageEl.parentElement;
        while (parent && !messageId) {
          messageId = parent.getAttribute('data-id');
          parent = parent.parentElement;
        }
      }
      
      // Fallback to generated ID
      if (!messageId) {
        messageId = this.generateMessageId(messageEl);
      }

      if (!messageId) return;

      // Extract sender name from data-pre-plain-text attribute
      let sender = 'Unknown';

      if (prePlainText) {
        console.log('WhatsApp Reaction Analyzer: Parsing prePlainText:', prePlainText);
        // Parse: "[3:47 pm, 08/10/2025] Taha Hassan: " (WhatsApp Web format with date)
        const match = prePlainText.match(/^\[(\d{1,2}:\d{2}\s[ap]m),\s\d{2}\/\d{2}\/\d{4}\]\s([^:]+):\s/);
        if (match) {
          sender = match[2].trim();
          console.log('WhatsApp Reaction Analyzer: Extracted sender:', sender);
        } else {
          // Fallback: try pattern without date format specificity
          const fallbackMatch = prePlainText.match(/^\[.*?\]\s([^:]+):\s/);
          if (fallbackMatch) {
            sender = fallbackMatch[1].trim();
            console.log('WhatsApp Reaction Analyzer: Fallback extracted sender:', sender);
          } else {
            console.log('WhatsApp Reaction Analyzer: Could not parse sender from:', prePlainText);
          }
        }
      } else {
        console.log('WhatsApp Reaction Analyzer: No data-pre-plain-text attribute found');
        // Fallback to other methods
        const senderEl = messageEl.querySelector('[data-testid="conversation-title"]') ||
                        messageEl.querySelector('span[title]') ||
                        messageEl.querySelector('.copyable-text') ||
                        messageEl.querySelector('[data-testid="msg-meta"] span') ||
                        messageEl.querySelector('span[dir="ltr"]');
        
        sender = senderEl ? senderEl.textContent.trim() : 'Unknown';
      }

      // Extract reactions
      const reactions = this.extractReactions(messageEl);

      // Debug logging
      console.log(`WhatsApp Reaction Analyzer: Analyzing message from ${sender}, reactions: ${reactions.size}`);
      if (reactions.size > 0) {
        console.log(`WhatsApp Reaction Analyzer: Found ${reactions.size} reactions for message from ${sender}:`, reactions);
      }
      
      // Always log message data for debugging
      console.log(`WhatsApp Reaction Analyzer: Message data - ID: ${messageId}, Sender: ${sender}, Reactions: ${reactions.size}`);

      // Store reaction data
      if (!this.reactionData.has(messageId)) {
        this.reactionData.set(messageId, {
          sender: sender,
          reactions: new Map(),
          timestamp: Date.now()
        });
      }

      const messageData = this.reactionData.get(messageId);
      
      // Update reactions
      reactions.forEach((reactors, emoji) => {
        if (!messageData.reactions.has(emoji)) {
          messageData.reactions.set(emoji, new Map());
        }
        
        reactors.forEach(reactor => {
          const currentCount = messageData.reactions.get(emoji).get(reactor) || 0;
          messageData.reactions.get(emoji).set(reactor, currentCount + 1);
        });
      });

      // Send updated data to background script
      this.sendDataToBackground();

    } catch (error) {
      console.error('WhatsApp Reaction Analyzer: Error analyzing message:', error);
    }
  }

  extractReactions(messageEl) {
    const reactions = new Map();
    
    console.log('WhatsApp Reaction Analyzer: Extracting reactions from message:', messageEl);
    
    // Look for reaction elements - WhatsApp Web uses various selectors
    const reactionSelectors = [
      '[data-testid="reaction"]',
      '.reaction',
      '[aria-label*="reaction"]',
      'span[title*="reaction"]',
      'div[title*="reaction"]',
      '[data-testid="reaction-emoji"]',
      'span[data-testid="reaction-emoji"]',
      'span[data-testid*="reaction"]',
      'div[data-testid*="reaction"]'
    ];

    reactionSelectors.forEach(selector => {
      const reactionEls = messageEl.querySelectorAll(selector);
      
      reactionEls.forEach(reactionEl => {
        try {
          // Extract emoji
          const emoji = reactionEl.textContent.trim() || 
                       reactionEl.getAttribute('data-emoji') ||
                       this.extractEmojiFromElement(reactionEl);

          if (!emoji) return;

          // Extract reactor names
          const reactorNames = this.extractReactorNames(reactionEl);
          
          if (reactorNames.length > 0) {
            reactions.set(emoji, reactorNames);
          }
        } catch (error) {
          console.error('Error extracting reaction:', error);
        }
      });
    });

    // Look for reactions in collapsed elements (like the spans you showed me)
    const allSpans = messageEl.querySelectorAll('span');
    allSpans.forEach(span => {
      const text = span.textContent || '';
      const title = span.getAttribute('title') || '';
      const ariaLabel = span.getAttribute('aria-label') || '';
      
      // Check if this looks like a reaction
      if (this.isReactionElement(span, text, title, ariaLabel)) {
        try {
          const emoji = this.extractEmojiFromElement(span);
          if (emoji) {
            const reactorNames = this.extractReactorNames(span);
            if (reactorNames.length > 0) {
              reactions.set(emoji, reactorNames);
            }
          }
        } catch (error) {
          console.error('Error extracting reaction from span:', error);
        }
      }
    });

    // Also check all divs for reactions
    const allDivs = messageEl.querySelectorAll('div');
    allDivs.forEach(div => {
      const text = div.textContent || '';
      const title = div.getAttribute('title') || '';
      const ariaLabel = div.getAttribute('aria-label') || '';
      
      if (this.isReactionElement(div, text, title, ariaLabel)) {
        try {
          const emoji = this.extractEmojiFromElement(div);
          if (emoji) {
            const reactorNames = this.extractReactorNames(div);
            if (reactorNames.length > 0) {
              reactions.set(emoji, reactorNames);
            }
          }
        } catch (error) {
          console.error('Error extracting reaction from div:', error);
        }
      }
    });

    console.log(`WhatsApp Reaction Analyzer: Total reactions found: ${reactions.size}`);
    return reactions;
  }

  isReactionElement(element, text, title, ariaLabel) {
    // Check if this element looks like a reaction
    const reactionPatterns = [
      /reacted with/i,
      /reaction/i,
      /👍|❤️|😂|😮|😢|😡|🎉|👏|🔥|💯/
    ];
    
    return reactionPatterns.some(pattern => 
      pattern.test(text) || pattern.test(title) || pattern.test(ariaLabel)
    ) || this.containsEmoji(text);
  }

  containsEmoji(text) {
    const emojiRegex = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu;
    return emojiRegex.test(text);
  }

  extractReactorNames(reactionEl) {
    const reactors = [];
    
    // Try different methods to extract reactor names
    const nameSelectors = [
      '[title]',
      '.reactor-name',
      'span[data-testid="reaction-reactor"]'
    ];

    nameSelectors.forEach(selector => {
      const nameEls = reactionEl.querySelectorAll(selector);
      nameEls.forEach(nameEl => {
        const name = nameEl.getAttribute('title') || nameEl.textContent.trim();
        if (name && !reactors.includes(name)) {
          reactors.push(name);
        }
      });
    });

    // If no specific reactor names found, try to extract from tooltip or hover text
    if (reactors.length === 0) {
      const tooltip = reactionEl.getAttribute('aria-label') || 
                     reactionEl.getAttribute('title');
      if (tooltip) {
        // Parse tooltip text to extract names
        const names = this.parseNamesFromTooltip(tooltip);
        reactors.push(...names);
      }
    }

    return reactors;
  }

  parseNamesFromTooltip(tooltip) {
    // Common patterns in WhatsApp reaction tooltips
    const patterns = [
      /(\w+(?:\s+\w+)*)\s+reacted/g,
      /(\w+(?:\s+\w+)*)\s+with/g,
      /(\w+(?:\s+\w+)*),/g
    ];

    const names = [];
    patterns.forEach(pattern => {
      let match;
      while ((match = pattern.exec(tooltip)) !== null) {
        const name = match[1].trim();
        if (name && !names.includes(name)) {
          names.push(name);
        }
      }
    });

    return names;
  }

  extractEmojiFromElement(element) {
    // Try to extract emoji from various attributes and text content
    const emojiSources = [
      element.textContent,
      element.getAttribute('data-emoji'),
      element.getAttribute('aria-label'),
      element.getAttribute('title')
    ];

    for (const source of emojiSources) {
      if (source) {
        // Extract emoji using regex
        const emojiMatch = source.match(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu);
        if (emojiMatch && emojiMatch[0]) {
          return emojiMatch[0];
        }
      }
    }

    return null;
  }

  generateMessageId(messageEl) {
    // Generate a unique ID based on message content and data-pre-plain-text
    const prePlainText = messageEl.getAttribute('data-pre-plain-text');
    if (prePlainText) {
      // Extract timestamp and sender for unique ID - match WhatsApp format with date
      const match = prePlainText.match(/^\[(\d{1,2}:\d{2}\s[ap]m),\s\d{2}\/\d{2}\/\d{4}\]\s([^:]+):\s/);
      if (match) {
        const [, timestamp, sender] = match;
        return `msg_${timestamp}_${sender.replace(/[^a-zA-Z0-9]/g, '_')}`;
      }

      // Fallback to simpler pattern
      const fallbackMatch = prePlainText.match(/^\[.*?\]\s([^:]+):\s/);
      if (fallbackMatch) {
        const sender = fallbackMatch[1].trim();
        return `msg_${Date.now()}_${sender.replace(/[^a-zA-Z0-9]/g, '_')}`;
      }

      return `msg_${prePlainText.replace(/[^a-zA-Z0-9]/g, '_')}`;
    }

    // Fallback to content-based ID
    const text = messageEl.textContent || '';
    const timestamp = Date.now();
    return `msg_${text.slice(0, 20).replace(/\s/g, '_')}_${timestamp}`;
  }

  sendDataToBackground() {
    // Convert Map to plain object for storage
    const dataToSend = {};
    this.reactionData.forEach((value, key) => {
      dataToSend[key] = {
        sender: value.sender,
        reactions: Object.fromEntries(
          Array.from(value.reactions.entries()).map(([emoji, reactors]) => [
            emoji,
            Object.fromEntries(reactors)
          ])
        ),
        timestamp: value.timestamp
      };
    });

    console.log(`WhatsApp Reaction Analyzer: Sending ${Object.keys(dataToSend).length} messages to background script`);
    console.log('WhatsApp Reaction Analyzer: Data being sent:', dataToSend);

    chrome.runtime.sendMessage({
      type: 'REACTION_DATA_UPDATE',
      data: dataToSend
    });
  }

  setupMessageListener() {
    // Listen for messages from popup
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
      if (request.type === 'GET_REACTION_DATA') {
        this.sendDataToBackground();
        sendResponse({ success: true });
      } else if (request.type === 'GET_AVAILABLE_CHATS') {
        const chats = this.getAvailableChats();
        sendResponse({ chats: chats });
      }
    });
  }

  getAvailableChats() {
    const chats = [];
    
    console.log('WhatsApp Reaction Analyzer: Scanning for available chats...');
    
    // First, try to get the current chat name from the right pane
    const currentChatName = this.getCurrentChatName();
    if (currentChatName) {
      const chatId = `current_chat_${currentChatName.replace(/[^a-zA-Z0-9]/g, '_')}`;
      chats.push({
        id: chatId,
        name: currentChatName,
        type: 'current'
      });
      console.log(`WhatsApp Reaction Analyzer: Found current chat: ${currentChatName}`);
    }
    
    // Also extract unique senders from our existing message data
    const chatNames = new Set();
    
    // Extract chat names from our existing message data
    this.reactionData.forEach((messageData, messageId) => {
      if (messageData.sender && messageData.sender !== 'Unknown') {
        chatNames.add(messageData.sender);
      }
    });
    
    console.log(`WhatsApp Reaction Analyzer: Found ${chatNames.size} unique senders from tracked messages:`, Array.from(chatNames));
    
    // Convert to chat objects
    Array.from(chatNames).forEach((sender, index) => {
      const chatId = `chat_${sender.replace(/[^a-zA-Z0-9]/g, '_')}_${index}`;
      chats.push({
        id: chatId,
        name: sender,
        type: 'sender'
      });
    });
    
    // If we still don't have enough chats, try to extract from title elements
    if (chats.length < 3) {
      console.log('WhatsApp Reaction Analyzer: Not enough chats, trying title elements...');
      
      const titleElements = document.querySelectorAll('[title]');
      const potentialChatNames = new Set();
      
      titleElements.forEach(el => {
        const title = el.getAttribute('title');
        if (title && title.length > 0 && title.length < 100 && 
            !title.includes('pm') && !title.includes('am') && 
            !title.includes(':') && !title.includes('You') &&
            !title.includes('tail-') && !title.includes('forward-') &&
            !title.includes('video-call') && !title.includes('search') &&
            !title.includes('more') && !title.includes('Click here') &&
            !title.includes('Menu') && !title.includes('New chat') &&
            !title.includes('Profile details') && !title.includes('Get the app') &&
            !title.includes('Attach') && !title.includes('Type a message')) {
          potentialChatNames.add(title.trim());
        }
      });
      
      console.log(`WhatsApp Reaction Analyzer: Found ${potentialChatNames.size} potential chat names from titles:`, Array.from(potentialChatNames));
      
      // Add unique chat names that we haven't seen before
      Array.from(potentialChatNames).forEach((chatName, index) => {
        if (!chats.some(chat => chat.name === chatName)) {
          const chatId = `title_chat_${chatName.replace(/[^a-zA-Z0-9]/g, '_')}_${index}`;
          chats.push({
            id: chatId,
            name: chatName,
            type: 'title'
          });
        }
      });
    }
    
    // If we still don't have chats, try to find chat list in the left pane
    if (chats.length === 0) {
      console.log('WhatsApp Reaction Analyzer: No chats from message data, trying left pane...');
      
      const leftPaneSelectors = [
        '#side',  // This is the correct left pane selector
        '[data-testid="chat-list"]',
        '[data-testid="chatlist"]',
        'div[data-testid="side"]',
        'div[role="listbox"]',
        'div[role="list"]'
      ];
      
      let leftPane = null;
      for (const selector of leftPaneSelectors) {
        leftPane = document.querySelector(selector);
        if (leftPane) {
          console.log(`WhatsApp Reaction Analyzer: Found left pane with selector: ${selector}`);
          break;
        }
      }
      
      if (leftPane) {
        // Look for chat items in the left pane
        const chatItemSelectors = [
          '[data-testid="chat"]',
          '[data-testid="chat-item"]',
          'div[role="listitem"]',
          'div[title]',
          'div[data-testid*="chat"]'
        ];
        
        let chatItems = [];
        for (const selector of chatItemSelectors) {
          chatItems = leftPane.querySelectorAll(selector);
          if (chatItems.length > 0) {
            console.log(`WhatsApp Reaction Analyzer: Found ${chatItems.length} chat items in left pane with selector: ${selector}`);
            break;
          }
        }
        
        chatItems.forEach((item, index) => {
          try {
            const chatName = item.getAttribute('title') || 
                           item.textContent.trim().split('\n')[0] ||
                           `Chat ${index + 1}`;
            
            const chatId = `chat_${chatName.replace(/[^a-zA-Z0-9]/g, '_')}_${index}`;
            chats.push({
              id: chatId,
              name: chatName,
              type: 'list'
            });
          } catch (error) {
            console.error('Error extracting chat info:', error);
          }
        });
      }
    }
    
    console.log('WhatsApp Reaction Analyzer: Available chats:', chats);
    return chats;
  }

  getCurrentChatName() {
    // Try to find the current chat name from the right pane
    const rightPane = document.querySelector('#main');
    if (!rightPane) return null;

    // Look for chat name in the header area
    const chatNameSelectors = [
      'div[class*="header"] span[title]',
      'div[class*="title"] span',
      'span[title]',
      'div[title]'
    ];

    for (const selector of chatNameSelectors) {
      const element = rightPane.querySelector(selector);
      if (element) {
        const chatName = element.textContent?.trim() || element.getAttribute('title');
        if (chatName && chatName.length > 0 && chatName.length < 100) {
          return chatName;
        }
      }
    }

    // Since we have title elements, let's use those to find the current chat
    const titleElements = document.querySelectorAll('[title]');
    for (const el of titleElements) {
      const title = el.getAttribute('title');
      if (title && title.length > 0 && title.length < 100 &&
          !title.includes('pm') && !title.includes('am') &&
          !title.includes(':') && !title.includes('You') &&
          !title.includes('tail-') && !title.includes('forward-') &&
          !title.includes('video-call') && !title.includes('search') &&
          !title.includes('more') && !title.includes('Click here') &&
          !title.includes('Menu') && !title.includes('New chat') &&
          !title.includes('Profile details') && !title.includes('Get the app') &&
          !title.includes('Attach') && !title.includes('Type a message')) {
        return title.trim();
      }
    }

    return null;
  }

  getReactionStats() {
    const stats = new Map(); // Map of sender -> Map of reactor -> count

    this.reactionData.forEach((messageData, messageId) => {
      const sender = messageData.sender;
      
      if (!stats.has(sender)) {
        stats.set(sender, new Map());
      }

      const senderStats = stats.get(sender);

      messageData.reactions.forEach((reactors, emoji) => {
        reactors.forEach((count, reactor) => {
          const currentCount = senderStats.get(reactor) || 0;
          senderStats.set(reactor, currentCount + count);
        });
      });
    });

    return stats;
  }
}

// Initialize the tracker when the page loads
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    new WhatsAppReactionTracker();
  });
} else {
  new WhatsAppReactionTracker();
}

// Add global function for manual testing
window.debugWhatsAppMessages = function() {
  console.log('=== MANUAL DEBUG ===');
  console.log('Messages with data-pre-plain-text:', document.querySelectorAll('[data-pre-plain-text]').length);
  console.log('All divs:', document.querySelectorAll('div').length);
  console.log('Elements with data-id:', document.querySelectorAll('[data-id]').length);

  const messages = document.querySelectorAll('[data-pre-plain-text]');
  if (messages.length > 0) {
    console.log('First message:', messages[0]);
    console.log('First message HTML:', messages[0].outerHTML);
  }
};

// Test extension status
window.testExtensionStatus = function() {
  console.log('=== EXTENSION STATUS TEST ===');

  // Check if we're in an extension context
  console.log('1. Extension Context:');
  console.log('  - typeof chrome:', typeof chrome);
  console.log('  - chrome.runtime:', !!chrome?.runtime);
  console.log('  - chrome.runtime.id:', chrome?.runtime?.id || 'Not available');

  // Check if content script functions are available
  console.log('\n2. Content Script Functions:');
  console.log('  - debugWhatsAppMessages:', typeof window.debugWhatsAppMessages);
  console.log('  - comprehensiveWhatsAppDebug:', typeof window.comprehensiveWhatsAppDebug);

  // Check DOM
  console.log('\n3. DOM Status:');
  console.log('  - Document URL:', document.URL);
  console.log('  - Document readyState:', document.readyState);
  console.log('  - Body exists:', !!document.body);

  if (document.body) {
    console.log('  - Body classes:', document.body.className);
  }

  // Check for WhatsApp elements
  console.log('\n4. WhatsApp Elements:');
  const whatsappElements = [
    '#main',
    '#whatsapp-web',
    '#side',
    '[data-testid="conversation-panel-messages"]',
    '[data-testid="chat-list"]',
    'div[role="application"]'
  ];

  whatsappElements.forEach(selector => {
    const element = document.querySelector(selector);
    console.log(`  ${selector}: ${element ? 'FOUND' : 'NOT FOUND'}`);
  });

  // Check for messages
  console.log('\n5. Messages:');
  const messages = document.querySelectorAll('[data-pre-plain-text]');
  console.log('  - Total messages found:', messages.length);

  if (messages.length > 0) {
    console.log('  - First message data-pre-plain-text:', messages[0].getAttribute('data-pre-plain-text'));
  }

  console.log('\n=== STATUS TEST COMPLETE ===');
};

// Comprehensive debugging function
window.comprehensiveWhatsAppDebug = function() {
  console.log('=== COMPREHENSIVE WHATSAPP DEBUG ===');

  // 1. Check extension context
  console.log('1. EXTENSION CONTEXT:');
  console.log('  - Chrome runtime available:', typeof chrome !== 'undefined' && chrome.runtime);
  console.log('  - Extension ID:', chrome?.runtime?.id || 'Not available');

  // 2. Check DOM structure
  console.log('\n2. DOM STRUCTURE:');
  const rightPane = document.querySelector('#main');
  console.log('  - Right pane (#main) found:', !!rightPane);
  if (rightPane) {
    console.log('  - Right pane classes:', rightPane.className);
    console.log('  - Right pane children:', rightPane.children.length);
  }

  // 3. Check messages
  console.log('\n3. MESSAGES:');
  const allMessages = document.querySelectorAll('[data-pre-plain-text]');
  console.log('  - Total messages found:', allMessages.length);

  if (allMessages.length > 0) {
    console.log('  - Sample message structure:');
    const sampleMsg = allMessages[0];
    console.log('    - Element:', sampleMsg);
    console.log('    - Classes:', sampleMsg.className);
    console.log('    - Parent:', sampleMsg.parentElement?.tagName);
    console.log('    - Parent classes:', sampleMsg.parentElement?.className);

    // Check if message is in right pane
    if (rightPane) {
      const messagesInRightPane = rightPane.querySelectorAll('[data-pre-plain-text]');
      console.log('  - Messages in right pane:', messagesInRightPane.length);
    }
  }

  // 4. Analyze data-pre-plain-text content
  console.log('\n4. DATA-PRE-PLAIN-TEXT ANALYSIS:');
  const messages = document.querySelectorAll('[data-pre-plain-text]');
  const prePlainTexts = [];

  messages.forEach((msg, index) => {
    const prePlainText = msg.getAttribute('data-pre-plain-text');
    if (prePlainText) {
      prePlainTexts.push(prePlainText);
      if (index < 5) { // Show first 5
        console.log(`  Message ${index + 1}: "${prePlainText}"`);
      }
    }
  });

  console.log(`  - Total messages with data-pre-plain-text: ${prePlainTexts.length}`);

  // 5. Test regex patterns
  console.log('\n5. REGEX PATTERN TESTING:');
  const testPatterns = [
    /^(\d{1,2}:\d{2}\s[ap]m)\s-\s([^:]+):\s/,  // Main pattern
    /-\s([^:]+):\s/,  // Fallback pattern
    /\]\s([^:]+):\s*$/  // Old pattern (shouldn't work)
  ];

  testPatterns.forEach((pattern, index) => {
    console.log(`  Pattern ${index + 1}: ${pattern.source}`);
    let matches = 0;
    prePlainTexts.forEach(text => {
      if (pattern.test(text)) matches++;
    });
    console.log(`    - Matches: ${matches}/${prePlainTexts.length}`);
  });

  // 6. Test sender extraction
  console.log('\n6. SENDER EXTRACTION TESTING:');
  prePlainTexts.slice(0, 3).forEach((text, index) => {
    console.log(`  Test ${index + 1}: "${text}"`);

    // Test main pattern
    const match = text.match(/^(\d{1,2}:\d{2}\s[ap]m)\s-\s([^:]+):\s/);
    if (match) {
      console.log(`    - Main pattern: sender = "${match[2].trim()}"`);
    } else {
      console.log('    - Main pattern: FAILED');

      // Test fallback
      const fallbackMatch = text.match(/-\s([^:]+):\s/);
      if (fallbackMatch) {
        console.log(`    - Fallback pattern: sender = "${fallbackMatch[1].trim()}"`);
      } else {
        console.log('    - Fallback pattern: FAILED');
      }
    }
  });

  // 7. Check current chat detection
  console.log('\n7. CURRENT CHAT DETECTION:');
  if (rightPane) {
    const allText = rightPane.textContent;
    const lines = allText.split('\n').filter(line => line.trim().length > 0);

    console.log(`  - Total lines in right pane: ${lines.length}`);

    // Look for chat name
    for (const line of lines) {
      if (line.length > 0 && line.length < 100 &&
          !line.includes('pm') && !line.includes('am') &&
          !line.includes(':') && !line.includes('You') &&
          !line.includes('tail-') && !line.includes('forward-') &&
          !line.includes('video-call') && !line.includes('search') &&
          !line.includes('more') && !line.includes('Click here')) {
        console.log(`  - Potential chat name: "${line.trim()}"`);
        break;
      }
    }
  }

  // 8. Check title elements for chat names
  console.log('\n8. TITLE ELEMENTS FOR CHAT NAMES:');
  const titleElements = document.querySelectorAll('[title]');
  const potentialChatNames = [];

  titleElements.forEach(el => {
    const title = el.getAttribute('title');
    if (title && title.length > 0 && title.length < 100 &&
        !title.includes('pm') && !title.includes('am') &&
        !title.includes(':') && !title.includes('You') &&
        !title.includes('tail-') && !title.includes('forward-') &&
        !title.includes('video-call') && !title.includes('search') &&
        !title.includes('more') && !title.includes('Click here') &&
        !title.includes('Menu') && !title.includes('New chat') &&
        !title.includes('Profile details') && !title.includes('Get the app') &&
        !title.includes('Attach') && !title.includes('Type a message')) {
      potentialChatNames.push(title.trim());
    }
  });

  console.log(`  - Found ${potentialChatNames.length} potential chat names:`);
  potentialChatNames.slice(0, 10).forEach(name => {
    console.log(`    - "${name}"`);
  });

  // 9. Check extension state
  console.log('\n9. EXTENSION STATE:');
  console.log('  - WhatsAppReactionTracker instance:', window.WhatsAppReactionTracker ? 'Available' : 'Not available');
  console.log('  - Reaction data size:', window.WhatsAppReactionTracker?.reactionData?.size || 0);

  // 10. Check message processing
  console.log('\n10. MESSAGE PROCESSING TEST:');
  if (messages.length > 0 && rightPane) {
    const testMessage = messages[0];
    console.log('  - Testing message processing on first message...');

    // Simulate the isMessageInActiveChat check
    const isInActiveChat = rightPane.contains(testMessage);
    console.log('  - Message in active chat:', isInActiveChat);

    if (isInActiveChat) {
      const prePlainText = testMessage.getAttribute('data-pre-plain-text');
      console.log('  - PrePlainText:', prePlainText);

      // Test sender extraction
      if (prePlainText) {
        const match = prePlainText.match(/^(\d{1,2}:\d{2}\s[ap]m)\s-\s([^:]+):\s/);
        if (match) {
          console.log('  - Extracted sender:', match[2].trim());
        } else {
          console.log('  - Sender extraction FAILED');
        }
      }
    }
  }

  console.log('\n=== DEBUG COMPLETE ===');
  console.log('Check the above output to identify issues with message tracking and chat detection.');
};
